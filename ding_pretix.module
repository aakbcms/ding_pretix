<?php

/**
 * Implements hook_permission().
 */
function ding_pretix_permission() {
  return array(
    'administer pretix settings' => array(
      'title' => t('Administer pretix settings'),
      'description' => t('Perform administration tasks for ding_pretix.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_pretix_menu()
{
  $items = [];

  $items['admin/config/ding/pretix'] = array(
    'title' => 'Pretix settings',
    'description' => 'Settings and defaults for Pretix integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_pretix_admin_settings_form'),
    'access arguments' => array('administer pretix settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/ding_pretix.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_node_insert().
 *
 * @param $node
 * @throws Exception
 */
function ding_pretix_node_insert($node)
{
  // We only handles event nodes.
  if ($node->type === 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'ding_pretix.api_module');
    $service_settings = variable_get('ding_pretix', []);

    if ($node->pretix['maintain_copy'] === 1) {

      $result = _ding_pretix_create_event($node, $service_settings);

      if (201 === (int) $result->code) {
        $pretix_info = _ding_pretix_insert_pretix_node_info($node, $service_settings['organizer_slug'], $result->data);

        // Set pdf ticket plugin
        $use_pdf_tickets = $node->pretix['ticket_form'] === 'pdf_ticket';
        $results[] = _ding_pretix_update_pdf_plugin($result->data, $use_pdf_tickets, $service_settings, $pretix_info['pretix_slug']);

        //Set ticket price
        $item = _ding_pretix_get_item($service_settings, $pretix_info['pretix_slug']);
        $results[] = _ding_pretix_update_item($node, $item, $service_settings, $pretix_info['pretix_slug']);

        // Set correct quota
        $quota = _ding_pretix_get_quota($item, $service_settings, $pretix_info['pretix_slug']);
        $results[] = _ding_pretix_update_quota_size($quota, $service_settings, $pretix_info['pretix_slug'], $pretix_info['capacity']);

        // Set event to 'live' if node is published.
        $results[] = _ding_pretix_update_live($node->status, $service_settings, $pretix_info['pretix_slug']);

        $errors = array_filter($results, function ($result) { return isset($result->error); });
        if (!empty($errors)) {
          drupal_set_message(t('There was a problem configuring the event in Pretix. Please verify in Pretix that all settings for the event are correct.'), 'error');
        } else {
          drupal_set_message(t('The event was successfully created in Pretix.'));
        }
      } else {
        drupal_set_message(t('The event could not be created in Pretix. Contact an administrator.'), 'error');
      }
    } else {
      _ding_pretix_insert_pretix_node_info($node, $service_settings['organizer_slug']);
    }
  }
}

/**
 * Implements hook_node_update().
 *
 * @param $node
 * @throws InvalidMergeQueryException
 */
function ding_pretix_node_update($node)
{
  if ($node->type == 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'ding_pretix.api_module');

    $pretix_info = _ding_pretix_get_pretix_node_info($node->nid);
    $service_settings = variable_get('ding_pretix', array());

    if (empty($pretix_info['pretix_slug'])) {
      if ($node->pretix['maintain_copy'] === 1) {
        // If the node has not previously been set to maintain a copy in Pretix we need to save it first.
        ding_pretix_node_insert($node);
      }
      else {
        // Only save pretix node info in Drupal
        _ding_pretix_update_pretix_node_info($node);
      }
    }
    else {

      if ($node->pretix['maintain_copy'] === 1) {
        // Update existing event in pretix
        $result = _ding_pretix_update_event($node, $service_settings, $pretix_info['pretix_slug']);

        if (200 === (int) $result->code) {
          $pretix_info = _ding_pretix_update_pretix_node_info($node);

          //Set ticket price
          $item = _ding_pretix_get_item($service_settings, $pretix_info['pretix_slug']);
          $results[] = _ding_pretix_update_item($node, $item, $service_settings, $pretix_info['pretix_slug']);

          // Set correct quota
          $quota = _ding_pretix_get_quota($item, $service_settings, $pretix_info['pretix_slug']);
          $results[] = _ding_pretix_update_quota_size($quota, $service_settings, $pretix_info['pretix_slug'], $pretix_info['capacity']);

          $errors = array_filter($results, function ($result) { return isset($result->error); });
          if (!empty($errors)) {
            drupal_set_message(t('There was a problem configuring the updated event in Pretix. Please verify in Pretix that all settings for the event are correct.'), 'error');
          } else {
            drupal_set_message(t('The event was successfully updated in Pretix.'));
          }
        } else {
          drupal_set_message(t('The event could not be updated in Pretix. Contact an administrator.'), 'error');
        }

      }
      else {
        // The event exist in Pretix but the user has changed the 'maintain_copy' setting to false.
        // Best we can do is to take the event offline.
        $result = _ding_pretix_update_live(false, $service_settings, $pretix_info['pretix_slug']);
        if (200 === (int) $result->code) {
          $pretix_info = _ding_pretix_update_pretix_node_info($node);

          drupal_set_message(t('The event already exists in Pretix. It has been taken offline.'));
        } else {
          drupal_set_message(t('The event could not be updated in Pretix. Contact an administrator.'), 'error');
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 *
 * @param $node
 */
function ding_pretix_node_delete($node)
{
  // We only handle event nodes.
  if ($node->type == 'ding_event') {
    module_load_include('inc', 'ding_pretix', 'ding_pretix.api_module');
    $service_settings = variable_get('ding_pretix', array());
    $pretix_info = _ding_pretix_get_pretix_node_info($node->nid);

    if ($pretix_info['pretix_slug']) {
      $result = _ding_pretix_delete_event($service_settings, $pretix_info['pretix_slug']);

      if(204 === (int) $result->code) {
        _ding_pretix_delete_pretix_node_info($node->nid);

        drupal_set_message(t('The event was successfully deleted from Pretix.'));
      } else {
        $live_result = _ding_pretix_update_live(false, $service_settings, $pretix_info['pretix_slug']);

        if(200 === (int) $live_result->code) {
          drupal_set_message(t('The event could not be deleted in Pretix - most likely because there are already orders. It has been taken offline instead.'), 'warning');
        } else {
          drupal_set_message(t('The event could not be deleted in Pretix. Contact an administrator.'), 'error');
        }

        _ding_pretix_delete_pretix_node_info($node->nid);
      }
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param $view_mode
 * @param $langcode
 */
function ding_pretix_node_view($node, $view_mode, $langcode)
{
  // We only handle event nodes.
  // Check that node is not new and check that the pretix
  // field should be shown this view mode.
  if ($node->type == 'ding_event' && isset($node->nid) && isset($node->content['field_pretix_tickets'])) {
    // @todo: Replace input with a div with a data-attribute. That is a more appropriate placeholder.
    $node->content['field_pretix_tickets'][0]['#markup'] = '<input type="hidden" class="pretix-ticketinfo" data-ticket="' . $node->nid . '" value="' . $node->nid . '"/>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function ding_pretix_form_ding_event_node_form_alter(&$form, &$form_state, $form_id)
{
  module_load_include('inc', 'ding_pretix', 'ding_pretix.api_module');
  $nid = $form['nid']['#value'] ?? $form['nid']['#value'];
  $pretix_node_info = _ding_pretix_get_pretix_node_info($nid);
  $pretix_node_defaults = _ding_pretix_get_pretix_node_info_defaults($nid);

  // Service settings.
  $service_settings = variable_get('ding_pretix', array());

  if ($pretix_node_info['pretix_slug']) {
    $pretix_url = _ding_pretix_get_event_admin_url($service_settings, $pretix_node_info['pretix_slug']);
    $pretix_link = l($pretix_url, array('absolute' => TRUE));
    $pretix_info = t('If more ticket types on this event is needed, go to <a href="@pretix-url">the Pretix event</a>. (Note: You may need to log on)', array('@pretix-url' => $pretix_url));
  } else {
    $pretix_link = t('None');
    $pretix_info = t('If more ticket types on this event is needed, edit the corresponding event on Pretix after this event has been created.');
  }

  $form['pretix'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pretix'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  );

  $form['field_ding_event_price']['und'][0]['value']['#description'] = $pretix_info;

  $form['pretix']['capacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Event capacity'),
    '#size' => 5,
    '#maxlength' => 5,
    '#default_value' => $pretix_node_info['capacity'] ?? $pretix_node_defaults['capacity'],
    '#description' => t('Optional. Maximum capacity on this event. Set to 0 for unlimited capacity.'),
  );

  $form['pretix']['ticket_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Ticket type'),
    '#size' => 30,
    '#maxlength' => 255,
    '#default_value' => $pretix_node_info['ticket_type'] ?? $pretix_node_defaults['ticket_type'],
    '#description' => t('E. g. Adult, Child or Standard. Adgang is the default ticket type.') . ' ' . $pretix_info,
  );

  $ding_pretix_psp_elements = variable_get('ding_pretix_psp_elements', array());
  if ($ding_pretix_psp_elements && !empty($ding_pretix_psp_elements['pretix_psp_meta_key']) && count($ding_pretix_psp_elements['list'])) {
    $options = [];
    foreach ($ding_pretix_psp_elements['list'] as $element) {
      $options[$element['psp_value']] = $element['psp_name'];
    }

    // PSP is a code for accounting. Once set, we don't allow this to be changed, as this would invalidate the accounts.
    $disabled = empty($pretix_node_info['psp_element']) ? FALSE : TRUE;
    $description = $disabled ? t('For accounting reasons the PSP element cannot be changed.') : t('Select the PSP element the ticket sales should be registered under.');

    $form['pretix']['psp_element'] = array(
      '#type' => 'select',
      '#title' => t('PSP Element'),
      '#options' => $options,
      '#default_value' => $pretix_node_info['psp_element'] ?? $pretix_node_defaults['psp_element'],
      '#required' => FALSE,
      '#description' => $description,
      '#disabled' => $disabled,
    );
  }

  $form['pretix']['maintain_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Maintain copy on Pretix'),
    '#default_value' => $pretix_node_info['maintain_copy'] ?? (bool)$pretix_node_defaults['maintain_copy'],
    '#description' => t('When set, a corresponding event is created and updated on the Pretix ticket booking service.'),
  );

  $form['pretix']['ticket_form'] = array(
    '#type' => 'radios',
    '#title' => t('Use PDF or Email tickets'),
    '#options' => array(
      'pdf_ticket' => t('PDF Tickets'),
      'email_ticket' => t('Email Tickets'),
    ),
    '#default_value' => $pretix_node_info['ticket_form'] ?? $pretix_node_defaults['default_ticket_form'],
    '#description' => t('Use PDF or Email tickets for the event?'),
  );

  $form['pretix']['pretix_slug'] = array(
    '#type' => 'item',
    '#title' => t('Pretix Event'),
    '#markup' => $pretix_link,
    '#description' => t('A link to the corresponding event on the Pretix ticket booking service.'),
  );

}
